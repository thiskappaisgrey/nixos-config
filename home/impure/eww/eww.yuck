(defwidget bar []
  (centerbox :orientation "h"
    (workspaces)
    (music)
    (sidestuff)))

(defwidget sidestuff []
  (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"
    (metric :label "ðŸ”Š"
            :value volume
            :onchange "amixer -D pulse sset Master {}%")
    (metric :label "ï¡š"
            :value {EWW_RAM.used_mem_perc}
            :onchange "")
    (metric :label "ðŸ’¾"
            :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
            :onchange "")
    time))
;; https://github.com/tralph3/.dotfiles/blob/9f8d6e5e7f53d2914808888c574d4b911824160d/.config/eww/bar.yuck
;; I copied the ws code from here.. Not really sure how it works though .. haha

(deflisten wss :initial "[]" "scripts/get-workspaces")
(deflisten curr_ws :initial "1" "scripts/get-current-workspace")

(defwidget workspaces []
  (eventbox
   ;; it seems like this line makes the variable change??
   :onscroll "scripts/change-current-workspace {} ${curr_ws}"
   :class "workspaces"
       (box    
	       :orientation "h"
	       :space-evenly true
	       :halign "start"
	       :spacing 10

	       (for ws in wss
		    (eventbox 
		     (box 
		      :class {ws.id == curr_ws ? "current" : "other" }
		      (label
		       :text "${ws.id}"
		       )))))
	    ;; (button
	    ;;  :onclick "hyprctl dispatch workspace ${workspace.id}" "${workspace.id}")
	    ;; )
    
    ))

(defwidget music []
  (box :class "music"
       :orientation "h"
       :space-evenly false
       :halign "center"
    {music != "" ? "ðŸŽµ${music}" : ""}))


(defwidget metric [label value onchange]
  (box :orientation "h"
       :class "metric"
       :space-evenly false
    (box :class "label" label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))



(deflisten music :initial ""
  "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")

(defpoll volume :interval "1s"
  "scripts/getvol")

(defpoll time :interval "10s"
  "date '+%H:%M %b %d, %Y'")

(defwindow bar
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "90%"
                      :height "10px"
                      :anchor "top center")
  :reserve (struts :side "top" :distance "4%")
  (bar))
